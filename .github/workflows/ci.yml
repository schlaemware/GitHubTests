# Copyright (c) Microsoft Corporation.
# Licensed under the MIT license.

# This continuous integration pipeline is triggered anytime a user pushes code to the repo.
# This pipeline builds the Wpf project, runs unit tests, then saves the MSIX build artifact.
name: Continuous Integration

on:
  push:
    branches:
      - 'master'
      - 'develop'
  pull_request_target:
    branches:
      - 'master'
      - 'develop'
  schedule:
    - cron: '0 0 * * *'

jobs:
  build:    
    runs-on: windows-latest
    
    env:
      ApplicationProjectPath: Solution\PackagedTestApp\PackagedTestApp\PackagedTestApp.csproj
      AppPackagesDirectory: AppPackages
      Configuration: Release
      SigningCertificate: GitHubActionsWorkflow.pfx
      SolutionPath: Solution\TestSolution.sln
      TestProjectPath: Solution\Domain.Test\Domain.Test.csproj
      WapProjectDirectory: Solution\PackagedTestApp\PackagedTestApp (Package)
      WapProjectPath: Solution\PackagedTestApp\PackagedTestApp (Package)\PackagedTestApp (Package).wapproj
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
        
    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1.3.1
  
    - name: Restore
      run: dotnet restore $env:SolutionPath
      
    - name: Test
      run: dotnet test $env:TestProjectPath -c $env:Configuration --no-restore
    
    # Build x86
    - name: Build Application x86
      run: msbuild $env:ApplicationProjectPath /p:Platform=$env:TargetPlatform /p:Configuration=$env:Configuration
      env:
        TargetPlatform: x86
    
    - name: Restore Application x86
      run: msbuild $env:SolutionPath /t:Restore /p:Configuration=$env:Configuration /p:RuntimeIdentifier=$env:RuntimeIdentifier
      env:
        RuntimeIdentifier: win-x86
    
    # Build x64
    - name: Build Application x64
      run: msbuild $env:ApplicationProjectPath /p:Platform=$env:TargetPlatform /p:Configuration=$env:Configuration
      env:
        TargetPlatform: x64
    
    - name: Restore Application x64
      run: msbuild $env:SolutionPath /t:Restore /p:Configuration=$env:Configuration /p:RuntimeIdentifier=$env:RuntimeIdentifier
      env:
        RuntimeIdentifier: win-x64

    # Package
    - name: Decode PFX
      run: |
        $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.BASE64_ENCODE_PFX }}")
        $currentDirectory = Get-Location
        $certificatePath = Join-Path -Path $env:WapProjectDirectory -ChildPath $env:SigningCertificate
        [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)
    
    - name: Build package
      #run: msbuild $env:SolutionPath /p:Configuration=$env:Configuration /p:Platform=$env:TargetPlatform /p:UapAppxPackageBuildMode=$env:BuildMode /p:AppxBundle=$env:AppxBundle /p:PackageCertificateKeyFile=$env:SigningCertificate /p:PackageCertificatePassword=${{ secrets.Pfx_Key }} -verbosity:minimal
      run: msbuild $env:SolutionPath /p:Configuration=$env:Configuration /p:Platform=$env:TargetPlatform /p:AppxBundle=$env:AppxBundle /p:PackageCertificateKeyFile=$env:SigningCertificate /p:PackageCertificatePassword=${{ secrets.PFX_KEY }} -verbosity:minimal
      env:
        AppxBundle: Always
        #BuildMode: SideloadOnly
        TargetPlatform: 'x86|x64'
        
    - name: Remove PFX
      run: |
        $certificatePath = Join-Path -Path $env:WapProjectDirectory -ChildPath $env:SigningCertificate
        Remove-Item -Path $certificatePath
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3.1.2
      with:
        name: MSIX Package
        path: ${{ env.WapProjectDirectory }}\${{ env.AppPackagesDirectory }}